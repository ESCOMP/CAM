#!/usr/bin/env python3

"""
create the cam library
"""
# pylint: disable=multiple-imports, wrong-import-position, wildcard-import
# pylint: disable=unused-wildcard-import, bad-whitespace, too-many-locals
# pylint: disable=invalid-name
import sys, os, filecmp, shutil


_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "CIME", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import run_sub_or_cmd, expect, run_cmd
from CIME.utils import import_from_file
from CIME.buildlib import parse_input
from CIME.build import get_standard_makefile_args

logger = logging.getLogger(__name__)

###############################################################################
def _build_fms(caseroot, libroot, bldroot):
    ###############################################################################

    with Case(caseroot) as case:

        # Only need FMS for fv3 dycore
        cam_dycore = case.get_value("CAM_DYCORE")
        srcroot = case.get_value("SRCROOT")
        if cam_dycore == "fv3":
            # first check for the external FMS library and build it
            # Check to see if some other component built it already
            fmsbuildlib = os.path.join(srcroot, "libraries", "FMS", "buildlib")
            librootfms = os.path.join(libroot, "libfms.a")
            if not os.path.exists(librootfms):
                if case.get_value("DEBUG"):
                    strdebug = "debug"
                else:
                    strdebug = "nodebug"

                if case.get_value("BUILD_THREADED"):
                    strthread = "threads"
                else:
                    strthread = "nothreads"

                mpilib = case.get_value("MPILIB")
                sharedpath = os.path.join(case.get_value("COMPILER"), mpilib,
                                          strdebug, strthread)
                slr = os.path.abspath(case.get_value("SHAREDLIBROOT"))
                fmsbuildroot = os.path.join(slr, sharedpath)
                fmsinstallpath = os.path.join(fmsbuildroot, "FMS")
                install_libfms = os.path.join(fmsinstallpath, "libfms.a")

                if not os.path.exists(install_libfms):
                    if not os.path.exists(fmsbuildlib):
                        #todo: call checkout_externals to get this component
                        expect(False, "FMS external not found")
                    else:
                        stat, _, err = run_cmd(f"{fmsbuildlib} {fmsbuildroot} {fmsinstallpath} {caseroot}", verbose=True)
                        expect(stat==0, f"FMS build Failed {err}")

                if os.path.exists(install_libfms):
                    shutil.copy(install_libfms, libroot)

###############################################################################
def _build_cam(caseroot, libroot, bldroot):
    ###############################################################################

    with Case(caseroot, read_only=False) as case:

        srcroot = case.get_value("SRCROOT")
        # -------------------------------------------------------
        # Call cam's buildcpp
        # -------------------------------------------------------
        testpath = os.path.join(srcroot, "components", "cam")
        if os.path.exists(testpath):
            srcroot = testpath

        cmd = os.path.join(os.path.join(srcroot, "cime_config", "buildcpp"))
        logger.info("     ...calling cam buildcpp to set build time options")
        try:
            buildcpp = import_from_file("buildcpp", cmd)
            cam_cppdefs = buildcpp.buildcpp(case)
        except:
            raise RuntimeError("CAM's 'buildcpp' script failed to run properly.")

    with Case(caseroot) as case:

        casetools = case.get_value("CASETOOLS")
        srcroot = case.get_value("SRCROOT")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        mach = case.get_value("MACH")
        user_incldir = None
        cam_dycore = case.get_value("CAM_DYCORE")
        if cam_dycore == "fv3":
            slr = os.path.abspath(case.get_value("SHAREDLIBROOT"))
            compiler = case.get_value("COMPILER")
            mpilib = case.get_value("MPILIB")
            debug = "debug" if case.get_value("DEBUG") else "nodebug"
            threaded = "threads" if case.get_value("BUILD_THREADED") or case.get_value("FORCE_BUILD_SMP") else "nothreads"
            comp_interface = case.get_value("COMP_INTERFACE")
            fmsbuilddir = os.path.join(
                slr, compiler, mpilib, debug, threaded, "FMS")
            user_incldir = '"-I{} -I{} -I{}"'.format(
                os.path.join(srcroot, "libraries", "FMS", "src", "include"),
                os.path.join(srcroot, "libraries", "FMS", "src", "mpp", "include"),
                fmsbuilddir)

        # -------------------------------------------------------
        # Filepath is created in caseroot/camconf by the call
        # to buildcpp - this needs to be copied to bldroot
        # -------------------------------------------------------
        filesrc = os.path.join(caseroot, "Buildconf", "camconf", "Filepath")
        filedst = os.path.join(bldroot, "Filepath_tmp")
        shutil.copy(filesrc, filedst)

        filedst = os.path.join(bldroot, "Filepath")
        filedst_tmp = os.path.join(bldroot, "Filepath_tmp")
        if os.path.isfile(filedst):
            if not filecmp.cmp(filedst_tmp, filedst):
                shutil.move(filedst_tmp, filedst)
        else:
            shutil.move(filedst_tmp, filedst)

        # -------------------------------------------------------
        # fms is needed by fv3 and should have been built by the framework
        # -------------------------------------------------------
        if cam_dycore == "fv3":
            libfms = os.path.join(fmsbuilddir, "libfms.a")
            expect(os.path.isfile(libfms), "FMS library not found {}".format(libfms))
            shutil.copy(libfms, libroot)

        # -------------------------------------------------------
        # build the library
        # -------------------------------------------------------
        complib = os.path.join(libroot, "libatm.a")
        makefile = os.path.join(casetools, "Makefile")

        cmd = "{} complib -j {} COMP_NAME=cam COMPLIB={} -f {} {} ".format(
            gmake, gmake_j, complib, makefile, get_standard_makefile_args(case)
        )
        if cam_cppdefs:
            cmd += " USER_CPPDEFS='{}'".format(cam_cppdefs)

        if user_incldir:
            cmd += " USER_INCLDIR={}".format(user_incldir)

        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n", cmd, out, err)
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))


###############################################################################


def _main_func():
    caseroot, libroot, bldroot = parse_input(sys.argv)
    _build_fms(caseroot, libroot, bldroot)
    _build_cam(caseroot, libroot, bldroot)


###############################################################################

if __name__ == "__main__":
    _main_func()
