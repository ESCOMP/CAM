#!/usr/bin/env python3

"""
create the cam library
"""
#pylint: disable=multiple-imports, wrong-import-position, wildcard-import
#pylint: disable=unused-wildcard-import, bad-whitespace, too-many-locals
#pylint: disable=invalid-name
import sys, os, filecmp, shutil, imp

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import run_cmd, expect
from CIME.buildlib import parse_input
from CIME.build import get_standard_makefile_args
from CIME.XML.env_build import EnvBuild

logger = logging.getLogger(__name__)

###############################################################################
def _build_fms(caseroot, libroot, bldroot):
###############################################################################

    with Case(caseroot) as case:

        # Only need FMS for fv3 dycore
        cam_dycore = case.get_value("CAM_DYCORE")
        if cam_dycore == 'fv3':
            # Check to see if some other component built it already
            if not os.path.exists(os.path.join(libroot,"libfms.a")):
                # first check for the external FMS library and build it
                srcroot = case.get_value("SRCROOT")
                fmsbuildlib = os.path.join(srcroot,"libraries","FMS","buildlib")
                fmsbuilddir = os.path.join(case.get_value("EXEROOT"),"FMS")
                expect(os.path.exists(fmsbuildlib), "FMS external not found")
                stat, _, err = run_cmd("{} {} {} {}".format(fmsbuildlib, case.get_value("EXEROOT"), fmsbuilddir, caseroot), verbose=True)
                expect(stat==0, "FMS build Failed {}".format(err))

                libfms = os.path.join(bldroot,"FMS","libfms.a")
                if os.path.exists(libfms):
                    shutil.copy(libfms, libroot)

###############################################################################
def _build_cam(caseroot, libroot, bldroot):
###############################################################################

    with Case(caseroot, read_only=False) as case:

        srcroot = case.get_value("SRCROOT")
        #-------------------------------------------------------
        # Call cam's buildcpp
        #-------------------------------------------------------
        testpath = os.path.join(srcroot, "components", "cam")
        if os.path.exists(testpath):
            srcroot = testpath

        cmd = os.path.join(os.path.join(srcroot,
                                        "cime_config", "buildcpp"))
        logger.info("     ...calling cam buildcpp to set build time options")
        try:
            mod = imp.load_source("buildcpp", cmd)
            cam_cppdefs = mod.buildcpp(case)
        except:
            raise

    with Case(caseroot) as case:

        casetools = case.get_value("CASETOOLS")
        srcroot = case.get_value("SRCROOT")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        mach = case.get_value("MACH")

        #-------------------------------------------------------
        # Filepath is created in caseroot/camconf by the call
        # to buildcpp - this needs to be copied to bldroot
        #-------------------------------------------------------
        filesrc = os.path.join(caseroot, "Buildconf", "camconf", "Filepath")
        filedst = os.path.join(bldroot, "Filepath_tmp")
        shutil.copy(filesrc, filedst)

        filedst     = os.path.join(bldroot, "Filepath")
        filedst_tmp = os.path.join(bldroot, "Filepath_tmp")
        if os.path.isfile(filedst):
            if not filecmp.cmp(filedst_tmp, filedst):
                shutil.move(filedst_tmp, filedst)
        else:
            shutil.move(filedst_tmp, filedst)

        #-------------------------------------------------------
        # build the library
        #-------------------------------------------------------
        complib  = os.path.join(libroot, "libatm.a")
        makefile = os.path.join(casetools, "Makefile")

        cmd = "{} complib -j {} MODEL=cam COMPLIB={} -f {} {} " \
            .format(gmake, gmake_j, complib, makefile, get_standard_makefile_args(case))
        if cam_cppdefs:
            cmd += " USER_CPPDEFS='{}'".format(cam_cppdefs)

        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n", cmd, out, err)
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

###############################################################################
def _run_cmd(command, working_dir):
###############################################################################

    rc, out, err = run_cmd(command, from_dir=working_dir, verbose=True)
    expect(rc == 0, "Command {} failed with rc={}".format(command, rc))

###############################################################################
def _cmake_default_args(caseroot):
###############################################################################
# Returns a dictionary of CMake variables based on the Macros.cmake file for
# the build.

    build = EnvBuild(case_root=caseroot)
    with Case(caseroot) as case:
        macro_path = os.path.abspath(os.path.join(caseroot, "cmake_macros", ""))
        args = "-DCONVERT_TO_MAKE=ON "
        args += "-DCASEROOT={} ".format(caseroot)
        args += "-DCOMPILER={} ".format(build.get_value("COMPILER"))
        args += "-DOS={} ".format(build.get_value("OS"))
        args += "-DMACH={} ".format(case.get_value("MACH"))
        args += "-DCMAKE_C_COMPILER_WORKS=1 "
        args += "-DCMAKE_Fortran_COMPILER_WORKS=1 "
        args += "-DCMAKE_CXX_COMPILER_WORKS=1 "
        cmd = "cmake {} .".format(args)
        rc, out, err = run_cmd(cmd, combine_output=True, from_dir=macro_path)
        expect(rc == 0, "Command {} failed with rc={} out={} err={}".format(cmd, rc, out, err))

        arg_dict = {}
        for line in out.splitlines():
            if ":=" in line:
                key, val = line.split(":=")
                arg_dict[key.replace('CIME_SET_MAKEFILE_VAR','').strip()] = val.strip()

        return arg_dict

###############################################################################
def _build_json_fortran(caseroot, libroot, bldroot):
###############################################################################
# Builds the json-fortran library and updates the case variables used to set
# the include paths and linked libraries

    with Case(caseroot) as case:
        bldpath = os.path.join(bldroot, "json-fortran")
        if not os.path.exists(bldpath):
            os.makedirs(bldpath)
        srcpath = os.path.abspath(os.path.join(case.get_value("COMP_ROOT_DIR_ATM"), \
                                               "libraries", "json-fortran", ""))
        logger.info("Building json-fortran in {} from source in {}\n".format(bldpath, srcpath))

        arg_dict = _cmake_default_args(caseroot)
        cmake_args = "-DCMAKE_Fortran_COMPILER={} ".format(arg_dict["SFC"])
        cmake_args += "-DCMAKE_C_COMPILER_WORKS=1 "
        cmake_args += "-DCMAKE_CXX_COMPILER_WORKS=1 "
        cmake_args += "-DCMAKE_BUILD_TYPE=Release "
        cmake_args += "-DSKIP_DOC_GEN:BOOL=TRUE "
        cmake_args += srcpath

        _run_cmd("cmake {}".format(cmake_args), bldpath)
        _run_cmd(case.get_value("GMAKE"), bldpath)

        # add json-fortran to include paths
        incldir = os.environ.get('USER_INCLDIR')
        if incldir is None:
            incldir = ''
        os.environ['USER_INCLDIR'] = incldir + \
            " -I{} ".format(os.path.join(bldroot, "json-fortran", "include"))

        # The built library is included in the CAM_LINKED_LIBS entry in
        # config_component.xml and is staged here to the lib folder
        os.rename(os.path.join(bldroot, "json-fortran", "lib", "libjsonfortran.a"), \
                  os.path.join(libroot, "libjsonfortran.a"))

###############################################################################
def _build_tuvx(caseroot, libroot, bldroot):
###############################################################################
# Builds the TUV-x library and updates the case variables used to set the
# include paths and linked libraries

    build = EnvBuild(case_root=caseroot)
    with Case(caseroot) as case:
        bldpath = os.path.join(bldroot, "tuv-x")
        if not os.path.exists(bldpath):
            os.makedirs(bldpath)
        jsoninc = os.path.join(bldroot, "json-fortran", "include", "")
        expect(os.path.exists(jsoninc), \
               "JSON-Fortran include folder for TUV-x build not found at {}".format(jsoninc))
        jsonlib = os.path.join(libroot, "libjsonfortran.a")
        expect(os.path.exists(jsonlib), \
               "JSON-Fortran library for TUV-x build not found at {}".format(jsonlib))
        srcpath = os.path.abspath(os.path.join(case.get_value("COMP_ROOT_DIR_ATM"), \
                                               "libraries", "tuv-x", ""))
        logger.info("Building TUV-x in {} from source in {}\n".format(bldpath, srcpath))

        arg_dict = _cmake_default_args(caseroot)
        if build.get_value("MPILIB") == "mpi-serial":
            cmake_args = "-DCMAKE_Fortran_COMPILER={} ".format(arg_dict["SFC"])
            cmake_args += "-DCMAKE_C_COMPILER={} ".format(arg_dict["SCC"])
        else:
            cmake_args = "-DCMAKE_Fortran_COMPILER={} ".format(arg_dict["MPIFC"])
            cmake_args += "-DCMAKE_C_COMPILER={} ".format(arg_dict["MPICC"])
            cmake_args += "-DENABLE_MPI:BOOL=TRUE "
        cmake_args += "-DCMAKE_C_COMPILER_WORKS=1 "
        cmake_args += "-DCMAKE_CXX_COMPILER_WORKS=1 "
        cmake_args += "-DCMAKE_BUILD_TYPE=Release "
        cmake_args += "-DENABLE_COVERAGE=OFF "
        cmake_args += "-DENABLE_TESTS=OFF "
        cmake_args += "-DJSON_INCLUDE_DIR={} ".format(jsoninc)
        cmake_args += "-DJSON_LIB={} ".format(jsonlib)
        cmake_args += "-DCMAKE_Fortran_FLAGS='{}' ".format(arg_dict["FFLAGS"])
        cmake_args += srcpath

        _run_cmd("cmake {}".format(cmake_args), bldpath)
        _run_cmd(case.get_value("GMAKE"), bldpath)

        # add TUV-x to include paths
        incldir = os.environ.get('USER_INCLDIR')
        if incldir is None:
            incldir = ''
        os.environ['USER_INCLDIR'] = incldir + \
            " -I{} ".format(os.path.join(bldroot, "tuv-x", "include"))

        # The built libraries are included in the CAM_LINKED_LIBS entry in
        # config_component.xml and are staged here to the lib folder
        os.rename(os.path.join(bldroot, "tuv-x", "lib", "libmusica.a"), \
                  os.path.join(libroot, "libmusica.a"))
        os.rename(os.path.join(bldroot, "tuv-x", "lib", "libtuvx.a"), \
                  os.path.join(libroot, "libtuvx.a"))

###############################################################################

def _main_func():
    caseroot, libroot, bldroot = parse_input(sys.argv)
    _build_json_fortran(caseroot, libroot, bldroot)
    _build_tuvx(caseroot, libroot, bldroot)
    _build_fms(caseroot, libroot, bldroot)
    _build_cam(caseroot, libroot, bldroot)

###############################################################################

if __name__ == "__main__":
    _main_func()
